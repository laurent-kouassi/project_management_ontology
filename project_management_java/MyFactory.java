package pm;

import pm.impl.*;


import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: MyFactory<br>
 * @version generated on Fri Dec 27 13:22:21 EET 2019 by morningstar
 */
public class MyFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public MyFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public MyFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#", .class, Default.class);
    }

    /**
     * Creates an instance of type .  Modifies the underlying ontology.
     */
    public  create(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_, Default.class);
    }

    /**
     * Gets an instance of type  with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public  get(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_, Default.class);
    }

    /**
     * Gets all instances of  from the ontology.
     */
    public Collection<? extends > getAllInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_, Default.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Activity
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Activity", Activity.class, DefaultActivity.class);
    }

    /**
     * Creates an instance of type Activity.  Modifies the underlying ontology.
     */
    public Activity createActivity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ACTIVITY, DefaultActivity.class);
    }

    /**
     * Gets an instance of type Activity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Activity getActivity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ACTIVITY, DefaultActivity.class);
    }

    /**
     * Gets all instances of Activity from the ontology.
     */
    public Collection<? extends Activity> getAllActivityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ACTIVITY, DefaultActivity.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Analysis_and_Design
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Analysis_and_Design", Analysis_and_Design.class, DefaultAnalysis_and_Design.class);
    }

    /**
     * Creates an instance of type Analysis_and_Design.  Modifies the underlying ontology.
     */
    public Analysis_and_Design createAnalysis_and_Design(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ANALYSIS_AND_DESIGN, DefaultAnalysis_and_Design.class);
    }

    /**
     * Gets an instance of type Analysis_and_Design with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Analysis_and_Design getAnalysis_and_Design(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ANALYSIS_AND_DESIGN, DefaultAnalysis_and_Design.class);
    }

    /**
     * Gets all instances of Analysis_and_Design from the ontology.
     */
    public Collection<? extends Analysis_and_Design> getAllAnalysis_and_DesignInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ANALYSIS_AND_DESIGN, DefaultAnalysis_and_Design.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Analysts
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Analysts", Analysts.class, DefaultAnalysts.class);
    }

    /**
     * Creates an instance of type Analysts.  Modifies the underlying ontology.
     */
    public Analysts createAnalysts(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ANALYSTS, DefaultAnalysts.class);
    }

    /**
     * Gets an instance of type Analysts with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Analysts getAnalysts(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ANALYSTS, DefaultAnalysts.class);
    }

    /**
     * Gets all instances of Analysts from the ontology.
     */
    public Collection<? extends Analysts> getAllAnalystsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ANALYSTS, DefaultAnalysts.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Artifact
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Artifact", Artifact.class, DefaultArtifact.class);
    }

    /**
     * Creates an instance of type Artifact.  Modifies the underlying ontology.
     */
    public Artifact createArtifact(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ARTIFACT, DefaultArtifact.class);
    }

    /**
     * Gets an instance of type Artifact with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Artifact getArtifact(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ARTIFACT, DefaultArtifact.class);
    }

    /**
     * Gets all instances of Artifact from the ontology.
     */
    public Collection<? extends Artifact> getAllArtifactInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ARTIFACT, DefaultArtifact.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Artifact_Analysis_and_Design
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Artifact_Analysis_and_Design", Artifact_Analysis_and_Design.class, DefaultArtifact_Analysis_and_Design.class);
    }

    /**
     * Creates an instance of type Artifact_Analysis_and_Design.  Modifies the underlying ontology.
     */
    public Artifact_Analysis_and_Design createArtifact_Analysis_and_Design(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ARTIFACT_ANALYSIS_AND_DESIGN, DefaultArtifact_Analysis_and_Design.class);
    }

    /**
     * Gets an instance of type Artifact_Analysis_and_Design with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Artifact_Analysis_and_Design getArtifact_Analysis_and_Design(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ARTIFACT_ANALYSIS_AND_DESIGN, DefaultArtifact_Analysis_and_Design.class);
    }

    /**
     * Gets all instances of Artifact_Analysis_and_Design from the ontology.
     */
    public Collection<? extends Artifact_Analysis_and_Design> getAllArtifact_Analysis_and_DesignInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ARTIFACT_ANALYSIS_AND_DESIGN, DefaultArtifact_Analysis_and_Design.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Artifact_Business_Modeling
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Artifact_Business_Modeling", Artifact_Business_Modeling.class, DefaultArtifact_Business_Modeling.class);
    }

    /**
     * Creates an instance of type Artifact_Business_Modeling.  Modifies the underlying ontology.
     */
    public Artifact_Business_Modeling createArtifact_Business_Modeling(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ARTIFACT_BUSINESS_MODELING, DefaultArtifact_Business_Modeling.class);
    }

    /**
     * Gets an instance of type Artifact_Business_Modeling with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Artifact_Business_Modeling getArtifact_Business_Modeling(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ARTIFACT_BUSINESS_MODELING, DefaultArtifact_Business_Modeling.class);
    }

    /**
     * Gets all instances of Artifact_Business_Modeling from the ontology.
     */
    public Collection<? extends Artifact_Business_Modeling> getAllArtifact_Business_ModelingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ARTIFACT_BUSINESS_MODELING, DefaultArtifact_Business_Modeling.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Artifact_Configuration_and_Change_Management
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Artifact_Configuration_and_Change_Management", Artifact_Configuration_and_Change_Management.class, DefaultArtifact_Configuration_and_Change_Management.class);
    }

    /**
     * Creates an instance of type Artifact_Configuration_and_Change_Management.  Modifies the underlying ontology.
     */
    public Artifact_Configuration_and_Change_Management createArtifact_Configuration_and_Change_Management(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ARTIFACT_CONFIGURATION_AND_CHANGE_MANAGEMENT, DefaultArtifact_Configuration_and_Change_Management.class);
    }

    /**
     * Gets an instance of type Artifact_Configuration_and_Change_Management with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Artifact_Configuration_and_Change_Management getArtifact_Configuration_and_Change_Management(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ARTIFACT_CONFIGURATION_AND_CHANGE_MANAGEMENT, DefaultArtifact_Configuration_and_Change_Management.class);
    }

    /**
     * Gets all instances of Artifact_Configuration_and_Change_Management from the ontology.
     */
    public Collection<? extends Artifact_Configuration_and_Change_Management> getAllArtifact_Configuration_and_Change_ManagementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ARTIFACT_CONFIGURATION_AND_CHANGE_MANAGEMENT, DefaultArtifact_Configuration_and_Change_Management.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Artifact_Deployment
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Artifact_Deployment", Artifact_Deployment.class, DefaultArtifact_Deployment.class);
    }

    /**
     * Creates an instance of type Artifact_Deployment.  Modifies the underlying ontology.
     */
    public Artifact_Deployment createArtifact_Deployment(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ARTIFACT_DEPLOYMENT, DefaultArtifact_Deployment.class);
    }

    /**
     * Gets an instance of type Artifact_Deployment with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Artifact_Deployment getArtifact_Deployment(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ARTIFACT_DEPLOYMENT, DefaultArtifact_Deployment.class);
    }

    /**
     * Gets all instances of Artifact_Deployment from the ontology.
     */
    public Collection<? extends Artifact_Deployment> getAllArtifact_DeploymentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ARTIFACT_DEPLOYMENT, DefaultArtifact_Deployment.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Artifact_Environment
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Artifact_Environment", Artifact_Environment.class, DefaultArtifact_Environment.class);
    }

    /**
     * Creates an instance of type Artifact_Environment.  Modifies the underlying ontology.
     */
    public Artifact_Environment createArtifact_Environment(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ARTIFACT_ENVIRONMENT, DefaultArtifact_Environment.class);
    }

    /**
     * Gets an instance of type Artifact_Environment with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Artifact_Environment getArtifact_Environment(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ARTIFACT_ENVIRONMENT, DefaultArtifact_Environment.class);
    }

    /**
     * Gets all instances of Artifact_Environment from the ontology.
     */
    public Collection<? extends Artifact_Environment> getAllArtifact_EnvironmentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ARTIFACT_ENVIRONMENT, DefaultArtifact_Environment.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Artifact_Implementation
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Artifact_Implementation", Artifact_Implementation.class, DefaultArtifact_Implementation.class);
    }

    /**
     * Creates an instance of type Artifact_Implementation.  Modifies the underlying ontology.
     */
    public Artifact_Implementation createArtifact_Implementation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ARTIFACT_IMPLEMENTATION, DefaultArtifact_Implementation.class);
    }

    /**
     * Gets an instance of type Artifact_Implementation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Artifact_Implementation getArtifact_Implementation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ARTIFACT_IMPLEMENTATION, DefaultArtifact_Implementation.class);
    }

    /**
     * Gets all instances of Artifact_Implementation from the ontology.
     */
    public Collection<? extends Artifact_Implementation> getAllArtifact_ImplementationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ARTIFACT_IMPLEMENTATION, DefaultArtifact_Implementation.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Artifact_Project_Management
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Artifact_Project_Management", Artifact_Project_Management.class, DefaultArtifact_Project_Management.class);
    }

    /**
     * Creates an instance of type Artifact_Project_Management.  Modifies the underlying ontology.
     */
    public Artifact_Project_Management createArtifact_Project_Management(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ARTIFACT_PROJECT_MANAGEMENT, DefaultArtifact_Project_Management.class);
    }

    /**
     * Gets an instance of type Artifact_Project_Management with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Artifact_Project_Management getArtifact_Project_Management(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ARTIFACT_PROJECT_MANAGEMENT, DefaultArtifact_Project_Management.class);
    }

    /**
     * Gets all instances of Artifact_Project_Management from the ontology.
     */
    public Collection<? extends Artifact_Project_Management> getAllArtifact_Project_ManagementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ARTIFACT_PROJECT_MANAGEMENT, DefaultArtifact_Project_Management.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Artifact_Requirements
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Artifact_Requirements", Artifact_Requirements.class, DefaultArtifact_Requirements.class);
    }

    /**
     * Creates an instance of type Artifact_Requirements.  Modifies the underlying ontology.
     */
    public Artifact_Requirements createArtifact_Requirements(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ARTIFACT_REQUIREMENTS, DefaultArtifact_Requirements.class);
    }

    /**
     * Gets an instance of type Artifact_Requirements with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Artifact_Requirements getArtifact_Requirements(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ARTIFACT_REQUIREMENTS, DefaultArtifact_Requirements.class);
    }

    /**
     * Gets all instances of Artifact_Requirements from the ontology.
     */
    public Collection<? extends Artifact_Requirements> getAllArtifact_RequirementsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ARTIFACT_REQUIREMENTS, DefaultArtifact_Requirements.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Artifact_Test
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Artifact_Test", Artifact_Test.class, DefaultArtifact_Test.class);
    }

    /**
     * Creates an instance of type Artifact_Test.  Modifies the underlying ontology.
     */
    public Artifact_Test createArtifact_Test(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ARTIFACT_TEST, DefaultArtifact_Test.class);
    }

    /**
     * Gets an instance of type Artifact_Test with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Artifact_Test getArtifact_Test(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ARTIFACT_TEST, DefaultArtifact_Test.class);
    }

    /**
     * Gets all instances of Artifact_Test from the ontology.
     */
    public Collection<? extends Artifact_Test> getAllArtifact_TestInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ARTIFACT_TEST, DefaultArtifact_Test.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Business_Modeling
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Business_Modeling", Business_Modeling.class, DefaultBusiness_Modeling.class);
    }

    /**
     * Creates an instance of type Business_Modeling.  Modifies the underlying ontology.
     */
    public Business_Modeling createBusiness_Modeling(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BUSINESS_MODELING, DefaultBusiness_Modeling.class);
    }

    /**
     * Gets an instance of type Business_Modeling with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Business_Modeling getBusiness_Modeling(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BUSINESS_MODELING, DefaultBusiness_Modeling.class);
    }

    /**
     * Gets all instances of Business_Modeling from the ontology.
     */
    public Collection<? extends Business_Modeling> getAllBusiness_ModelingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BUSINESS_MODELING, DefaultBusiness_Modeling.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Configuration_and_Change_Management
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Configuration_and_Change_Management", Configuration_and_Change_Management.class, DefaultConfiguration_and_Change_Management.class);
    }

    /**
     * Creates an instance of type Configuration_and_Change_Management.  Modifies the underlying ontology.
     */
    public Configuration_and_Change_Management createConfiguration_and_Change_Management(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONFIGURATION_AND_CHANGE_MANAGEMENT, DefaultConfiguration_and_Change_Management.class);
    }

    /**
     * Gets an instance of type Configuration_and_Change_Management with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Configuration_and_Change_Management getConfiguration_and_Change_Management(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONFIGURATION_AND_CHANGE_MANAGEMENT, DefaultConfiguration_and_Change_Management.class);
    }

    /**
     * Gets all instances of Configuration_and_Change_Management from the ontology.
     */
    public Collection<? extends Configuration_and_Change_Management> getAllConfiguration_and_Change_ManagementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONFIGURATION_AND_CHANGE_MANAGEMENT, DefaultConfiguration_and_Change_Management.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Deployment
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Deployment", Deployment.class, DefaultDeployment.class);
    }

    /**
     * Creates an instance of type Deployment.  Modifies the underlying ontology.
     */
    public Deployment createDeployment(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DEPLOYMENT, DefaultDeployment.class);
    }

    /**
     * Gets an instance of type Deployment with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Deployment getDeployment(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DEPLOYMENT, DefaultDeployment.class);
    }

    /**
     * Gets all instances of Deployment from the ontology.
     */
    public Collection<? extends Deployment> getAllDeploymentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DEPLOYMENT, DefaultDeployment.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Develop_Business_Case
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Develop_Business_Case", Develop_Business_Case.class, DefaultDevelop_Business_Case.class);
    }

    /**
     * Creates an instance of type Develop_Business_Case.  Modifies the underlying ontology.
     */
    public Develop_Business_Case createDevelop_Business_Case(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DEVELOP_BUSINESS_CASE, DefaultDevelop_Business_Case.class);
    }

    /**
     * Gets an instance of type Develop_Business_Case with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Develop_Business_Case getDevelop_Business_Case(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DEVELOP_BUSINESS_CASE, DefaultDevelop_Business_Case.class);
    }

    /**
     * Gets all instances of Develop_Business_Case from the ontology.
     */
    public Collection<? extends Develop_Business_Case> getAllDevelop_Business_CaseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DEVELOP_BUSINESS_CASE, DefaultDevelop_Business_Case.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Developers
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Developers", Developers.class, DefaultDevelopers.class);
    }

    /**
     * Creates an instance of type Developers.  Modifies the underlying ontology.
     */
    public Developers createDevelopers(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DEVELOPERS, DefaultDevelopers.class);
    }

    /**
     * Gets an instance of type Developers with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Developers getDevelopers(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DEVELOPERS, DefaultDevelopers.class);
    }

    /**
     * Gets all instances of Developers from the ontology.
     */
    public Collection<? extends Developers> getAllDevelopersInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DEVELOPERS, DefaultDevelopers.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Discipline
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Discipline", Discipline.class, DefaultDiscipline.class);
    }

    /**
     * Creates an instance of type Discipline.  Modifies the underlying ontology.
     */
    public Discipline createDiscipline(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DISCIPLINE, DefaultDiscipline.class);
    }

    /**
     * Gets an instance of type Discipline with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Discipline getDiscipline(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DISCIPLINE, DefaultDiscipline.class);
    }

    /**
     * Gets all instances of Discipline from the ontology.
     */
    public Collection<? extends Discipline> getAllDisciplineInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DISCIPLINE, DefaultDiscipline.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Environment
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Environment", Environment.class, DefaultEnvironment.class);
    }

    /**
     * Creates an instance of type Environment.  Modifies the underlying ontology.
     */
    public Environment createEnvironment(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ENVIRONMENT, DefaultEnvironment.class);
    }

    /**
     * Gets an instance of type Environment with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Environment getEnvironment(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ENVIRONMENT, DefaultEnvironment.class);
    }

    /**
     * Gets all instances of Environment from the ontology.
     */
    public Collection<? extends Environment> getAllEnvironmentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ENVIRONMENT, DefaultEnvironment.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#General_Roles
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#General_Roles", General_Roles.class, DefaultGeneral_Roles.class);
    }

    /**
     * Creates an instance of type General_Roles.  Modifies the underlying ontology.
     */
    public General_Roles createGeneral_Roles(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GENERAL_ROLES, DefaultGeneral_Roles.class);
    }

    /**
     * Gets an instance of type General_Roles with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public General_Roles getGeneral_Roles(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GENERAL_ROLES, DefaultGeneral_Roles.class);
    }

    /**
     * Gets all instances of General_Roles from the ontology.
     */
    public Collection<? extends General_Roles> getAllGeneral_RolesInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GENERAL_ROLES, DefaultGeneral_Roles.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Implementation
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Implementation", Implementation.class, DefaultImplementation.class);
    }

    /**
     * Creates an instance of type Implementation.  Modifies the underlying ontology.
     */
    public Implementation createImplementation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IMPLEMENTATION, DefaultImplementation.class);
    }

    /**
     * Gets an instance of type Implementation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Implementation getImplementation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IMPLEMENTATION, DefaultImplementation.class);
    }

    /**
     * Gets all instances of Implementation from the ontology.
     */
    public Collection<? extends Implementation> getAllImplementationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IMPLEMENTATION, DefaultImplementation.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Managers
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Managers", Managers.class, DefaultManagers.class);
    }

    /**
     * Creates an instance of type Managers.  Modifies the underlying ontology.
     */
    public Managers createManagers(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MANAGERS, DefaultManagers.class);
    }

    /**
     * Gets an instance of type Managers with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Managers getManagers(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MANAGERS, DefaultManagers.class);
    }

    /**
     * Gets all instances of Managers from the ontology.
     */
    public Collection<? extends Managers> getAllManagersInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MANAGERS, DefaultManagers.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#PM_Learning_Material
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#PM_Learning_Material", PM_Learning_Material.class, DefaultPM_Learning_Material.class);
    }

    /**
     * Creates an instance of type PM_Learning_Material.  Modifies the underlying ontology.
     */
    public PM_Learning_Material createPM_Learning_Material(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PM_LEARNING_MATERIAL, DefaultPM_Learning_Material.class);
    }

    /**
     * Gets an instance of type PM_Learning_Material with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PM_Learning_Material getPM_Learning_Material(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PM_LEARNING_MATERIAL, DefaultPM_Learning_Material.class);
    }

    /**
     * Gets all instances of PM_Learning_Material from the ontology.
     */
    public Collection<? extends PM_Learning_Material> getAllPM_Learning_MaterialInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PM_LEARNING_MATERIAL, DefaultPM_Learning_Material.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Production_Support
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Production_Support", Production_Support.class, DefaultProduction_Support.class);
    }

    /**
     * Creates an instance of type Production_Support.  Modifies the underlying ontology.
     */
    public Production_Support createProduction_Support(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRODUCTION_SUPPORT, DefaultProduction_Support.class);
    }

    /**
     * Gets an instance of type Production_Support with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Production_Support getProduction_Support(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRODUCTION_SUPPORT, DefaultProduction_Support.class);
    }

    /**
     * Gets all instances of Production_Support from the ontology.
     */
    public Collection<? extends Production_Support> getAllProduction_SupportInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRODUCTION_SUPPORT, DefaultProduction_Support.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Project_Communications_Management
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Project_Communications_Management", Project_Communications_Management.class, DefaultProject_Communications_Management.class);
    }

    /**
     * Creates an instance of type Project_Communications_Management.  Modifies the underlying ontology.
     */
    public Project_Communications_Management createProject_Communications_Management(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROJECT_COMMUNICATIONS_MANAGEMENT, DefaultProject_Communications_Management.class);
    }

    /**
     * Gets an instance of type Project_Communications_Management with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Project_Communications_Management getProject_Communications_Management(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROJECT_COMMUNICATIONS_MANAGEMENT, DefaultProject_Communications_Management.class);
    }

    /**
     * Gets all instances of Project_Communications_Management from the ontology.
     */
    public Collection<? extends Project_Communications_Management> getAllProject_Communications_ManagementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROJECT_COMMUNICATIONS_MANAGEMENT, DefaultProject_Communications_Management.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Project_Cost_Management
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Project_Cost_Management", Project_Cost_Management.class, DefaultProject_Cost_Management.class);
    }

    /**
     * Creates an instance of type Project_Cost_Management.  Modifies the underlying ontology.
     */
    public Project_Cost_Management createProject_Cost_Management(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROJECT_COST_MANAGEMENT, DefaultProject_Cost_Management.class);
    }

    /**
     * Gets an instance of type Project_Cost_Management with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Project_Cost_Management getProject_Cost_Management(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROJECT_COST_MANAGEMENT, DefaultProject_Cost_Management.class);
    }

    /**
     * Gets all instances of Project_Cost_Management from the ontology.
     */
    public Collection<? extends Project_Cost_Management> getAllProject_Cost_ManagementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROJECT_COST_MANAGEMENT, DefaultProject_Cost_Management.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Project_Human_Resource_Management
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Project_Human_Resource_Management", Project_Human_Resource_Management.class, DefaultProject_Human_Resource_Management.class);
    }

    /**
     * Creates an instance of type Project_Human_Resource_Management.  Modifies the underlying ontology.
     */
    public Project_Human_Resource_Management createProject_Human_Resource_Management(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROJECT_HUMAN_RESOURCE_MANAGEMENT, DefaultProject_Human_Resource_Management.class);
    }

    /**
     * Gets an instance of type Project_Human_Resource_Management with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Project_Human_Resource_Management getProject_Human_Resource_Management(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROJECT_HUMAN_RESOURCE_MANAGEMENT, DefaultProject_Human_Resource_Management.class);
    }

    /**
     * Gets all instances of Project_Human_Resource_Management from the ontology.
     */
    public Collection<? extends Project_Human_Resource_Management> getAllProject_Human_Resource_ManagementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROJECT_HUMAN_RESOURCE_MANAGEMENT, DefaultProject_Human_Resource_Management.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Project_Integration_Management
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Project_Integration_Management", Project_Integration_Management.class, DefaultProject_Integration_Management.class);
    }

    /**
     * Creates an instance of type Project_Integration_Management.  Modifies the underlying ontology.
     */
    public Project_Integration_Management createProject_Integration_Management(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROJECT_INTEGRATION_MANAGEMENT, DefaultProject_Integration_Management.class);
    }

    /**
     * Gets an instance of type Project_Integration_Management with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Project_Integration_Management getProject_Integration_Management(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROJECT_INTEGRATION_MANAGEMENT, DefaultProject_Integration_Management.class);
    }

    /**
     * Gets all instances of Project_Integration_Management from the ontology.
     */
    public Collection<? extends Project_Integration_Management> getAllProject_Integration_ManagementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROJECT_INTEGRATION_MANAGEMENT, DefaultProject_Integration_Management.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Project_Management
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Project_Management", Project_Management.class, DefaultProject_Management.class);
    }

    /**
     * Creates an instance of type Project_Management.  Modifies the underlying ontology.
     */
    public Project_Management createProject_Management(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROJECT_MANAGEMENT, DefaultProject_Management.class);
    }

    /**
     * Gets an instance of type Project_Management with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Project_Management getProject_Management(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROJECT_MANAGEMENT, DefaultProject_Management.class);
    }

    /**
     * Gets all instances of Project_Management from the ontology.
     */
    public Collection<? extends Project_Management> getAllProject_ManagementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROJECT_MANAGEMENT, DefaultProject_Management.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Project_Procurement_Management
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Project_Procurement_Management", Project_Procurement_Management.class, DefaultProject_Procurement_Management.class);
    }

    /**
     * Creates an instance of type Project_Procurement_Management.  Modifies the underlying ontology.
     */
    public Project_Procurement_Management createProject_Procurement_Management(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROJECT_PROCUREMENT_MANAGEMENT, DefaultProject_Procurement_Management.class);
    }

    /**
     * Gets an instance of type Project_Procurement_Management with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Project_Procurement_Management getProject_Procurement_Management(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROJECT_PROCUREMENT_MANAGEMENT, DefaultProject_Procurement_Management.class);
    }

    /**
     * Gets all instances of Project_Procurement_Management from the ontology.
     */
    public Collection<? extends Project_Procurement_Management> getAllProject_Procurement_ManagementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROJECT_PROCUREMENT_MANAGEMENT, DefaultProject_Procurement_Management.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Project_Quality_Management
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Project_Quality_Management", Project_Quality_Management.class, DefaultProject_Quality_Management.class);
    }

    /**
     * Creates an instance of type Project_Quality_Management.  Modifies the underlying ontology.
     */
    public Project_Quality_Management createProject_Quality_Management(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROJECT_QUALITY_MANAGEMENT, DefaultProject_Quality_Management.class);
    }

    /**
     * Gets an instance of type Project_Quality_Management with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Project_Quality_Management getProject_Quality_Management(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROJECT_QUALITY_MANAGEMENT, DefaultProject_Quality_Management.class);
    }

    /**
     * Gets all instances of Project_Quality_Management from the ontology.
     */
    public Collection<? extends Project_Quality_Management> getAllProject_Quality_ManagementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROJECT_QUALITY_MANAGEMENT, DefaultProject_Quality_Management.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Project_Risk_Management
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Project_Risk_Management", Project_Risk_Management.class, DefaultProject_Risk_Management.class);
    }

    /**
     * Creates an instance of type Project_Risk_Management.  Modifies the underlying ontology.
     */
    public Project_Risk_Management createProject_Risk_Management(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROJECT_RISK_MANAGEMENT, DefaultProject_Risk_Management.class);
    }

    /**
     * Gets an instance of type Project_Risk_Management with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Project_Risk_Management getProject_Risk_Management(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROJECT_RISK_MANAGEMENT, DefaultProject_Risk_Management.class);
    }

    /**
     * Gets all instances of Project_Risk_Management from the ontology.
     */
    public Collection<? extends Project_Risk_Management> getAllProject_Risk_ManagementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROJECT_RISK_MANAGEMENT, DefaultProject_Risk_Management.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Project_Scope_Management
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Project_Scope_Management", Project_Scope_Management.class, DefaultProject_Scope_Management.class);
    }

    /**
     * Creates an instance of type Project_Scope_Management.  Modifies the underlying ontology.
     */
    public Project_Scope_Management createProject_Scope_Management(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROJECT_SCOPE_MANAGEMENT, DefaultProject_Scope_Management.class);
    }

    /**
     * Gets an instance of type Project_Scope_Management with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Project_Scope_Management getProject_Scope_Management(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROJECT_SCOPE_MANAGEMENT, DefaultProject_Scope_Management.class);
    }

    /**
     * Gets all instances of Project_Scope_Management from the ontology.
     */
    public Collection<? extends Project_Scope_Management> getAllProject_Scope_ManagementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROJECT_SCOPE_MANAGEMENT, DefaultProject_Scope_Management.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Project_Time_Management
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Project_Time_Management", Project_Time_Management.class, DefaultProject_Time_Management.class);
    }

    /**
     * Creates an instance of type Project_Time_Management.  Modifies the underlying ontology.
     */
    public Project_Time_Management createProject_Time_Management(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROJECT_TIME_MANAGEMENT, DefaultProject_Time_Management.class);
    }

    /**
     * Gets an instance of type Project_Time_Management with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Project_Time_Management getProject_Time_Management(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROJECT_TIME_MANAGEMENT, DefaultProject_Time_Management.class);
    }

    /**
     * Gets all instances of Project_Time_Management from the ontology.
     */
    public Collection<? extends Project_Time_Management> getAllProject_Time_ManagementInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROJECT_TIME_MANAGEMENT, DefaultProject_Time_Management.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#RUP_Core_Elements
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#RUP_Core_Elements", RUP_Core_Elements.class, DefaultRUP_Core_Elements.class);
    }

    /**
     * Creates an instance of type RUP_Core_Elements.  Modifies the underlying ontology.
     */
    public RUP_Core_Elements createRUP_Core_Elements(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RUP_CORE_ELEMENTS, DefaultRUP_Core_Elements.class);
    }

    /**
     * Gets an instance of type RUP_Core_Elements with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RUP_Core_Elements getRUP_Core_Elements(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RUP_CORE_ELEMENTS, DefaultRUP_Core_Elements.class);
    }

    /**
     * Gets all instances of RUP_Core_Elements from the ontology.
     */
    public Collection<? extends RUP_Core_Elements> getAllRUP_Core_ElementsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RUP_CORE_ELEMENTS, DefaultRUP_Core_Elements.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Report_Status
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Report_Status", Report_Status.class, DefaultReport_Status.class);
    }

    /**
     * Creates an instance of type Report_Status.  Modifies the underlying ontology.
     */
    public Report_Status createReport_Status(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_REPORT_STATUS, DefaultReport_Status.class);
    }

    /**
     * Gets an instance of type Report_Status with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Report_Status getReport_Status(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_REPORT_STATUS, DefaultReport_Status.class);
    }

    /**
     * Gets all instances of Report_Status from the ontology.
     */
    public Collection<? extends Report_Status> getAllReport_StatusInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_REPORT_STATUS, DefaultReport_Status.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Requirements
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Requirements", Requirements.class, DefaultRequirements.class);
    }

    /**
     * Creates an instance of type Requirements.  Modifies the underlying ontology.
     */
    public Requirements createRequirements(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_REQUIREMENTS, DefaultRequirements.class);
    }

    /**
     * Gets an instance of type Requirements with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Requirements getRequirements(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_REQUIREMENTS, DefaultRequirements.class);
    }

    /**
     * Gets all instances of Requirements from the ontology.
     */
    public Collection<? extends Requirements> getAllRequirementsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_REQUIREMENTS, DefaultRequirements.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Role
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Role", Role.class, DefaultRole.class);
    }

    /**
     * Creates an instance of type Role.  Modifies the underlying ontology.
     */
    public Role createRole(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ROLE, DefaultRole.class);
    }

    /**
     * Gets an instance of type Role with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Role getRole(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ROLE, DefaultRole.class);
    }

    /**
     * Gets all instances of Role from the ontology.
     */
    public Collection<? extends Role> getAllRoleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ROLE, DefaultRole.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Schedule_and_Assign_Work
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Schedule_and_Assign_Work", Schedule_and_Assign_Work.class, DefaultSchedule_and_Assign_Work.class);
    }

    /**
     * Creates an instance of type Schedule_and_Assign_Work.  Modifies the underlying ontology.
     */
    public Schedule_and_Assign_Work createSchedule_and_Assign_Work(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SCHEDULE_AND_ASSIGN_WORK, DefaultSchedule_and_Assign_Work.class);
    }

    /**
     * Gets an instance of type Schedule_and_Assign_Work with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Schedule_and_Assign_Work getSchedule_and_Assign_Work(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SCHEDULE_AND_ASSIGN_WORK, DefaultSchedule_and_Assign_Work.class);
    }

    /**
     * Gets all instances of Schedule_and_Assign_Work from the ontology.
     */
    public Collection<? extends Schedule_and_Assign_Work> getAllSchedule_and_Assign_WorkInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SCHEDULE_AND_ASSIGN_WORK, DefaultSchedule_and_Assign_Work.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Test
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Test", Test.class, DefaultTest.class);
    }

    /**
     * Creates an instance of type Test.  Modifies the underlying ontology.
     */
    public Test createTest(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TEST, DefaultTest.class);
    }

    /**
     * Gets an instance of type Test with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Test getTest(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TEST, DefaultTest.class);
    }

    /**
     * Gets all instances of Test from the ontology.
     */
    public Collection<? extends Test> getAllTestInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TEST, DefaultTest.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Testers
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Testers", Testers.class, DefaultTesters.class);
    }

    /**
     * Creates an instance of type Testers.  Modifies the underlying ontology.
     */
    public Testers createTesters(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TESTERS, DefaultTesters.class);
    }

    /**
     * Gets an instance of type Testers with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Testers getTesters(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TESTERS, DefaultTesters.class);
    }

    /**
     * Gets all instances of Testers from the ontology.
     */
    public Collection<? extends Testers> getAllTestersInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TESTERS, DefaultTesters.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Update_Change_Request
     */

    {
        javaMapping.add("http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#Update_Change_Request", Update_Change_Request.class, DefaultUpdate_Change_Request.class);
    }

    /**
     * Creates an instance of type Update_Change_Request.  Modifies the underlying ontology.
     */
    public Update_Change_Request createUpdate_Change_Request(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_UPDATE_CHANGE_REQUEST, DefaultUpdate_Change_Request.class);
    }

    /**
     * Gets an instance of type Update_Change_Request with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Update_Change_Request getUpdate_Change_Request(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_UPDATE_CHANGE_REQUEST, DefaultUpdate_Change_Request.class);
    }

    /**
     * Gets all instances of Update_Change_Request from the ontology.
     */
    public Collection<? extends Update_Change_Request> getAllUpdate_Change_RequestInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_UPDATE_CHANGE_REQUEST, DefaultUpdate_Change_Request.class);
    }


}
