package pm.impl;

import pm.*;


import java.net.URI;
import java.util.Collection;
import javax.xml.datatype.XMLGregorianCalendar;

import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.WrappedIndividualImpl;

import org.protege.owl.codegeneration.inference.CodeGenerationInference;

import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLOntology;


/**
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: DefaultDevelopers <br>
 * @version generated on Fri Dec 27 13:22:21 EET 2019 by morningstar
 */
public class DefaultDevelopers extends WrappedIndividualImpl implements Developers {

    public DefaultDevelopers(CodeGenerationInference inference, IRI iri) {
        super(inference, iri);
    }





    /* ***************************************************
     * Object Property http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#hasConsult
     */
     
    public Collection<? extends Artifact> getHasConsult() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HASCONSULT,
                                               DefaultArtifact.class);
    }

    public boolean hasHasConsult() {
	   return !getHasConsult().isEmpty();
    }

    public void addHasConsult(Artifact newHasConsult) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HASCONSULT,
                                       newHasConsult);
    }

    public void removeHasConsult(Artifact oldHasConsult) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HASCONSULT,
                                          oldHasConsult);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#hasDomain
     */
     
    public Collection<? extends Discipline> getHasDomain() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HASDOMAIN,
                                               DefaultDiscipline.class);
    }

    public boolean hasHasDomain() {
	   return !getHasDomain().isEmpty();
    }

    public void addHasDomain(Discipline newHasDomain) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HASDOMAIN,
                                       newHasDomain);
    }

    public void removeHasDomain(Discipline oldHasDomain) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HASDOMAIN,
                                          oldHasDomain);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#hasPerform
     */
     
    public Collection<? extends Activity> getHasPerform() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HASPERFORM,
                                               DefaultActivity.class);
    }

    public boolean hasHasPerform() {
	   return !getHasPerform().isEmpty();
    }

    public void addHasPerform(Activity newHasPerform) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HASPERFORM,
                                       newHasPerform);
    }

    public void removeHasPerform(Activity oldHasPerform) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HASPERFORM,
                                          oldHasPerform);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#hasRecommendation
     */
     
    public Collection<? extends PM_Learning_Material> getHasRecommendation() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HASRECOMMENDATION,
                                               DefaultPM_Learning_Material.class);
    }

    public boolean hasHasRecommendation() {
	   return !getHasRecommendation().isEmpty();
    }

    public void addHasRecommendation(PM_Learning_Material newHasRecommendation) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HASRECOMMENDATION,
                                       newHasRecommendation);
    }

    public void removeHasRecommendation(PM_Learning_Material oldHasRecommendation) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HASRECOMMENDATION,
                                          oldHasRecommendation);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/morningstar/ontologies/2019/9/untitled-ontology-9#hasResponsible
     */
     
    public Collection<? extends Artifact> getHasResponsible() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HASRESPONSIBLE,
                                               DefaultArtifact.class);
    }

    public boolean hasHasResponsible() {
	   return !getHasResponsible().isEmpty();
    }

    public void addHasResponsible(Artifact newHasResponsible) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HASRESPONSIBLE,
                                       newHasResponsible);
    }

    public void removeHasResponsible(Artifact oldHasResponsible) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HASRESPONSIBLE,
                                          oldHasResponsible);
    }


}
